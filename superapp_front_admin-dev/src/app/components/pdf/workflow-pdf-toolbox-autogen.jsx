
/**
 * Renders a toolbox AUTOGENERATED FIELD ITEM  with properties and values.
 *
 * @component
 * @param {Object} props - The component props.
 * @param {string} props.sectionName - The name of the section.
 * @param {Object} props.properties - The properties and their values.
 * @param {Function} props.onEntityClick - The function to handle entity click.
 * @param {boolean} props.isOpen - Indicates whether the section is open or not.
 * @param {Function} props.toggleAccordion - The function to toggle the accordion section.
 * @returns {JSX.Element} The rendered toolbox item component.
 */

import React, { useState, useEffect } from "react";
import { fetchDataFromAPI } from "@/pdf-module/utils/rest";
import axios from "axios";
import Cookies from "js-cookie";


function ToolBoxItem({ sectionName, properties, onEntityClick, isOpen, toggleAccordion }) {
  // Function to format the key with spaces between words
  const formatKey = (key) => {
    return key.replace(/([a-z])([A-Z])/g, '$1 $2').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
  };

  // Function to render properties and their values
  const renderProperties = (properties) => {
    return (
      <div>
        {Object.entries(properties).map(([key, value]) => (
          <div
            className="cursor-pointer flex justify-start items-center py-2 px-2 text-xs gap-2  false text-black-1000 w-full  p-2 rounded text-gray-500 hover:bg-purple-200 hover:text-purple-700 transition duration-75"
            onClick={() => onEntityClick(key, value)}
            key={key}
          >
            <i className="fas fa-star  text-green-500" />
            <strong>{key}:</strong>
          </div>
        ))}
      </div>
    );
  };

  return (
    <div>
      <h2>
        <button
          type="button"
          className="flex items-center justify-between w-full p-2 font-medium rtl:text-right text-gray-500 border border-b-0 border-gray-200  focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-800 dark:border-gray-700 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-gray-800 gap-3"
          aria-expanded={isOpen ? 'true' : 'false'}
          onClick={toggleAccordion}
          aria-controls={sectionName}
        >
          <span>{formatKey(sectionName)}</span>
          <svg
            className={`w-3 h-3 rotate-180 shrink-0 ${isOpen ? 'rotate' : ''}`}
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 10 6"
          >
            <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5 5 1 1 5"/>
          </svg>
        </button>
      </h2>
      <div id={sectionName} className={isOpen ? 'block' : 'hidden'}>
        <div className="p-5 border border-b-0 border-gray-200 dark:border-gray-700 dark:bg-gray-900">
          {/* Display sub properties here */}
          {renderProperties(properties)}
        </div>
      </div>
    </div>
  );
}

function ToolBoxAccordion({onEntityClick, currentWorkflowID}) {
  const [responseData, setResponseData] = useState(null);
  const [openSections, setOpenSections] = useState({});
  const [user, setUser] = useState(null);


  useEffect(() => {
    const decodedToken = Cookies.get("decodedToken");
    setUser(decodedToken ? JSON.parse(decodedToken) : null);
    return () => {
      console.log("Usuario cargado");
    };
  }, []);


  useEffect(() => {
    const fetchData = async () => {
      const data = await fetchDataFromAPI();
      let aux = {};
      try {
        let workflowProperties = await axios.get(`https://super.xertify.co:40002/workflow/v1/workflowProperties/${currentWorkflowID}`)
        workflowProperties = workflowProperties.data.data;
        workflowProperties.map((item) => {
          aux[item] = `${"${"}${item}}`
        })
      } catch (error) {
        console.error(error);
      }

      if(user){
        let auxPerson = {};
        try {
          let DynamicPersonProps = await axios.get(`https://super.xertify.co:40004/admin/v1/globalProperty/${user.acc_id}`)
          DynamicPersonProps = DynamicPersonProps.data.data;
          DynamicPersonProps.map((item) => {
            auxPerson[item.key] = `${"${dynamicPerson."}${item.key}}`
          })
        } catch (error) {
          console.error(error);
        }
    
        const updatedData = {
          ...data,
          DynamicPersonProperties: auxPerson
        };
        console.log(updatedData);
        setResponseData({ ...updatedData, WorkflowProperties: aux });
      }else{
        const updatedData = {
          ...data,
          DynamicPersonProperties: {
            dirdocente: "${dynamicPerson.dirdocente}",
            fechainici: "${dynamicPerson.fechainici}",
            vigencia: "${dynamicPerson.vigencia}",
            fechasuscr: "${dynamicPerson.fechasuscr}",
            categoria: "${dynamicPerson.categoria}",
            basicocomp: "${dynamicPerson.basicocomp}",
            bonoproduc: "${dynamicPerson.bonoproduc}",
            movilidad: "${dynamicPerson.movilidad}",
            gratificac: "${dynamicPerson.gratificac}",
            bonoextrao: "${dynamicPerson.bonoextrao}"
          }};

        setResponseData({ ...updatedData, WorkflowProperties: aux });
      }
    };
  
    fetchData();
  }, [user]);

  // Function to toggle accordion sections
  const toggleAccordion = (sectionName) => {
    setOpenSections(prevOpenSections => ({
      ...prevOpenSections,
      [sectionName]: !prevOpenSections[sectionName]
    }));
  };


  return (
    <div id="accordion-color" className="accordion" data-accordion="collapse" data-active-classes="bg-blue-100 dark:bg-gray-800 text-blue-600 dark:text-white">
      {responseData ? (
        Object.entries(responseData).map(([sectionName, properties], index) => (
          <ToolBoxItem
            key={index}
            sectionName={sectionName}
            properties={properties}
            onEntityClick={onEntityClick} // handle entity click as needed
            isOpen={openSections[sectionName]}
            toggleAccordion={() => toggleAccordion(sectionName)}
          />
        ))
      ) : (
        <p>Loading...</p>
      )}
    </div>
  );
}

export default ToolBoxAccordion;
